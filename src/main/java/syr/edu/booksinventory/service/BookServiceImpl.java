package syr.edu.booksinventory.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import syr.edu.booksinventory.model.Book;
import syr.edu.booksinventory.repository.BookRepository;
import javax.transaction.Transactional;
import java.time.Year;
import java.util.List;
import java.util.NoSuchElementException;

@Service
@Transactional
public class BookServiceImpl implements BookService {

    @Autowired // This means to get the bean called bookRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepo;

    private static final int yearDepreciationPercent = 20; // book depreciation percentage per year
    private static final int soldCountThreshold = 10; // threshold for soldCount of a book to depreciate the price
    private static final int soldCountDepreciationPercent = 10; // book depreciation percentage per soldCountThreshold

    // returns the list of all the books present in the DB
    @Override
    public List<Book> getAllBooks() {
        return bookRepo.findAll();
    }

    /**
     * It takes the Book id as param and checks for the book in the DB.
     * If the book is present in the DB and is available then returns Success
     * else returns Failure.
     * Everytime a book is bought, the sold count of that book gets incremented by 1
     *
     * @param  id the id of the book
     * @return A String "Success" or "Failure"
     */
    @Override
    public String buyBook(long id) {
        try {
            Book reqBook = bookRepo.findById(id).get();
            if (reqBook.isAvailable()) {
                reqBook.setAvailable(false);  // making the book not available since it's sold
                reqBook.setSoldCount(reqBook.getSoldCount() + 1); // incrementing the sold count of the book by 1
                return "Success";
            }
        } catch(NoSuchElementException e) {
            e.printStackTrace();
        }
        return "Failure";
    }

    /**
     * It takes the Book id as param and checks for the book in the DB.
     * If the book is present in the DB and is not available then returns Success + Updated Price of the book
     * else returns Failure
     * The price of the book depreciates based on the book published year and number of times it's been sold
     *
     * @param  id the id of the book
     * @return A String "Success + Updated Price" or "Failure"
     */
    @Override
    public String sellBook(long id) {
        try {
            Book retBook = bookRepo.findById(id).get();
            if (!retBook.isAvailable()) {
                retBook.setAvailable(true);  // making the book available again
                float updatedPrice = retBook.getPrice();
                int currentYear = Year.now().getValue();
                // priceChangedYear is the year when the latest depreciation has happened on the
                // book price due to year difference between current year and book published year
                // Initially this year is same as book published year
                int priceChangedYear = Integer.parseInt(retBook.getPriceChangedYear());
                // To depreciate the price due to year difference we have to check whether the current year
                // is equal to priceChangedYear or not. If it is not equal then we have to depreciate
                // the price of the book for the remaining years i.e, difference between
                // current year and priceChangedYear
                if (currentYear != priceChangedYear) {
                    int yearDifference = currentYear - priceChangedYear;
                    for (int i = 0; i < yearDifference; i++) { // the for loop is for successive depreciation
                        updatedPrice = updatedPrice * ((100 - yearDepreciationPercent) / 100.00f);
                    }
                    // update the priceChangedYear value to the current year since we have depreciated
                    // the price of the book this year
                    retBook.setPriceChangedYear(String.valueOf(currentYear));
                }

                // checking whether the book sold count is a multiple of soldCountThreshold value.
                // If it is a multiple then we should depreciate the price of the book
                int bookSoldCount = retBook.getSoldCount() / soldCountThreshold;
                for (int i = 0; i < bookSoldCount; i++) { // the for loop is for successive depreciation
                    updatedPrice = updatedPrice * ((100 - soldCountDepreciationPercent) / 100.00f);
                }
                updatedPrice = Math.round(updatedPrice * 100) / 100.00f; // rounding to two decimal places
                // If the updated price value is less than $1 then we will set the updated price to $1
                // This is to make sure that the price of the book should never be less than $1
                updatedPrice = (updatedPrice > 1) ? updatedPrice : 1.00f;
                retBook.setPrice(updatedPrice);
                return "Success, Price: $" + retBook.getPrice();
            }
        } catch(NoSuchElementException e) {
            e.printStackTrace();
        }
        return "Failure";
    }

    /**
     * This method is for adding the new book in the DB.
     * It takes all the required details of the book and stores it in the DB.
     *
     * @param isbn           a unique number given to each book
     * @param title          Title of the book
     * @param author         Author(s) of the Book
     * @param yearPublished  Year the Book got Published
     * @param edition        Edition of the Book
     * @param price          Cost of the Book
     * @return A String "Success + Price" or "Failure"
     */
    @Override
    public String addBook(String isbn, String title, String author, String yearPublished,
                          String edition, float price) {
        // Currently we are maintaining only 50 books in the Inventory.
        // So we don't accept any new books from the customers if the count equals 50
        if (bookRepo.count() < 50) {
            Book b = new Book();
            b.setISBN(isbn);
            b.setTitle(title);
            b.setAuthor(author);
            b.setYearPublished(yearPublished);
            b.setEdition(edition);
            b.setPrice(price);
            b.setAvailable(true);
            b.setPriceChangedYear(yearPublished);
            bookRepo.save(b);
            return "Success + Price: $" + price;
        }
        return "Failure";
    }

}
